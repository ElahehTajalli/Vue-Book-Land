{"remainingRequest":"/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/elaheh/Documents/University/project/node_modules/vue-over-body/src/index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/elaheh/Documents/University/project/node_modules/vue-over-body/src/index.vue","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoub3Zlcl9ib2R5X29wZW4gewogIG92ZXJmbG93OiBoaWRkZW47Cn0KCi5vdmVyX2JvZHlfbWFzayB7CiAgdG9wOiAwOwogIHJpZ2h0OiAwOwogIGJvdHRvbTogMDsKICBsZWZ0OiAwOwogIHBvc2l0aW9uOmZpeGVkOyAKICBvdmVyZmxvdy14OiBoaWRkZW47CiAgb3ZlcmZsb3cteTogYXV0bzsKfQoKLm92ZXJfYm9keV9tYXNrX2FmdGVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwgMCwgMCwgMC41KTsgCn0KCi5vdmVyX2JvZHlfZGlhbG9nIHsKICBwb3NpdGlvbjpyZWxhdGl2ZTsgCn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/vue-over-body/src","sourcesContent":["<script type=\"text/babel\">\n  module.exports = {\n    name: 'vue-over-body',\n    props: {\n      open: {\n        type: Number,\n        default: 0\n      },\n      transition: {\n        type: Number,\n        default: 0.3\n      },\n      dialogStyle: {\n        type: Object,\n        default: () => ({})\n      },\n      before: {\n        type: String,\n        default: ''\n      },\n      after: {\n        type: String,\n        default: ''\n      },\n      dim: {\n        type: Boolean,\n        default: true\n      }\n    },\n    data: function () {\n      return {\n        start: false,\n        finish: false,\n        cls: ' over_body_open'\n      }\n    },\n    mounted: function () {\n      if (this.open) {\n        this.toogle(this.open)\n      } else {\n        this.clear()\n      }\n    },\n    watch: {\n      open: function () {\n        this.toogle(this.open)\n      }\n    },\n    methods: {\n      close: function () {\n        this.toogle(false)\n      },\n      toogle: function (open) {\n        var t = 50\n        if (open) {\n          document.body.className += this.$data.cls\n          this.$data.start = true\n          setTimeout(() => this.$data.finish = true, t)\n        } else {\n          this.$data.finish = false\n          setTimeout(() => {\n            this.$data.start = false\n            this.clear()\n          }, this.transition * 1000 + t)\n        }\n      },\n      clear: function () {\n        document.body.className = document.body.className.split(this.$data.cls).join('')\n      },\n      setStyle: function (obj) {\n        if (obj == null) {\n          obj = {}\n        }\n\n        obj['z-index'] = this.open\n        obj['-webkit-transition'] = 'all ' + this.transition + 's'\n        obj['-moz-transition'] = 'all ' + this.transition + 's'\n        obj['-o-transition'] = 'all ' + this.transition + 's'\n        obj['transition'] = 'all ' + this.transition + 's'\n\n        return obj\n      }\n    }\n  }\n</script>\n\n<template>\n  <div\n    v-if=\"start\"\n    :class=\"['over_body_mask', finish && dim ? 'over_body_mask_after' : '']\"\n    @click=\"close\"\n    :style=\"setStyle()\"\n  >\n    <div\n      @click.stop\n      :style=\"setStyle(dialogStyle)\"\n      :class=\"['over_body_dialog', before, finish ? after : '']\"\n    >\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<style>\n  .over_body_open {\n    overflow: hidden;\n  }\n\n  .over_body_mask {\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    position:fixed; \n    overflow-x: hidden;\n    overflow-y: auto;\n  }\n\n  .over_body_mask_after {\n    background-color:rgba(0, 0, 0, 0.5); \n  }\n\n  .over_body_dialog {\n    position:relative; \n  }\n</style>\n"]}]}