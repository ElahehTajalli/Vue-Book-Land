{"remainingRequest":"/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/elaheh/Documents/University/project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/elaheh/Documents/University/project/src/components/UserProfile.vue?vue&type=template&id=6ef6ca5e&","dependencies":[{"path":"/home/elaheh/Documents/University/project/src/components/UserProfile.vue","mtime":1630013894968},{"path":"/home/elaheh/Documents/University/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}