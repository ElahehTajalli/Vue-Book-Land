{"remainingRequest":"/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/elaheh/Documents/University/project/node_modules/vue-tree-nav/src/components/bar.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/elaheh/Documents/University/project/node_modules/vue-tree-nav/src/components/bar.vue","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elaheh/Documents/University/project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRyZWVfbmF2X2JhciB7CiAgbWFyZ2luLWJvdHRvbToyMHB4Owp9CgoudHJlZV9uYXZfYmFyIHVsIHsKICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDA7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBib3gtc2hhZG93OiAwIDhweCAxNnB4IDAgcmdiYSgwLDAsMCwwLjIpOwp9CgoudHJlZV9uYXZfYmVmb3JlIHsKICBoZWlnaHQ6IDEwMCU7CiAgdG9wOiAwOwogIGxlZnQ6IC0zMDBweDsKfQoKLnRyZWVfbmF2X2FmdGVyIHsKICBsZWZ0OiAwOwp9Cg=="},{"version":3,"sources":["bar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkNA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"bar.vue","sourceRoot":"node_modules/vue-tree-nav/src/components","sourcesContent":["<script type=\"text/babel\">\n  import item from './item.vue'\n  import overBody from 'vue-over-body'\n\n  module.exports = {\n    name: 'vue-tree-nav',\n    components: {\n      'item': item,\n      'vue-over-body': overBody\n    },\n    props: {\n      side: {\n        type: Array,\n        default: () => []\n      },\n      left: {\n        type: Array,\n        default: () => []\n      },\n      right: {\n        type: Array,\n        default: () => []\n      },\n      location: {\n        type: String,\n        default: ''\n      },\n      showPath: {\n        type: Boolean,\n        default: true \n      },\n      barScale: {\n        type: Number,\n        default: 1\n      },\n      sideScale: {\n        type: Number,\n        default: 1\n      },\n      bgColor: {\n        type: String,\n        default: '#f3f3f3'\n      },\n      fontColor: {\n        type: String,\n        default: '#666666'\n      },\n      hoverColor: {\n        type: String,\n        default: '#dddddd'\n      },\n      activeColor: {\n        type: String,\n        default: '#000000'\n      }\n    },\n    data: function () {\n      return {\n        sideBar: 0,\n        rightDrop: 0,\n        leftDrop: 0,\n        path: '',\n        tree: [],\n        links: {},\n        Path: []\n      }\n    },\n    mounted: function () {\n      this.setRoutes()\n    },\n    watch: {\n      location: function () {\n        this.setLocation()\n      },\n      side: function () {\n        this.setRoutes()\n      },\n      left: function () {\n        this.setRoutes()\n      },\n      right: function () {\n        this.setRoutes()\n      }\n    },\n    methods: {\n      open: function () {\n        this.$data.sideBar += 1;\n      },\n      close: function () {\n        this.$data.sideBar = 0;\n      },\n      setLocation: function () {\n        this.$data.path = ''\n        Object.keys(this.$data.links).sort().forEach(key => {\n          if (`#${this.location}`.indexOf(key) !== -1) {\n            this.$data.path = this.$data.links[key]\n          }\n        })\n        this.$data.Path = this.$data.path.split(' / ')\n        this.close()\n      },\n      setRoutes: function () {\n        this.$data.tree = [{\n          style: 'text-align:right;',\n          icon: 'times',\n          href: this.close\n        }]\n        this.$data.links = {}\n        this.transverse(this.side, this.$data.tree, '', '#')\n        this.transverse(this.left, [], '', '#')\n        this.transverse(this.right, [], '', '#')\n        this.setLocation ()\n      },\n      transverse: function (Input, Output, label, path) {\n        Input.forEach(input => {\n          var abs = input.path && input.path.substr(0, 1) === '/'\n\n          var newLabel = input.label || input.name || (abs ? input.path.substr(1) : input.path)\n          if ((newLabel || input.icon) && (input.path || '').indexOf(':') === -1 && !input.redirect) {\n            Output.push({})\n            var i = Output.length - 1\n\n            Output[i].icon = input.icon\n            Output[i].label = newLabel\n            newLabel = (label ? `${label} / ` : '') + newLabel\n\n            var newPath = abs ? `#${input.path}` : `${path || ''}/${input.path}`\n            if (input.children) {\n              Output[i].children = []\n              this.transverse(input.children, Output[i].children, newLabel, newPath)\n            } else {\n              Output[i].href = input.href || newPath\n              this.$data.links[input.href || newPath] = newLabel\n            }\n          }\n        })\n      },\n      getRight: function () {\n        var R = []\n        this.right.forEach(r => {\n          R.push(r)\n        })\n        R.reverse()\n        return R\n      },\n      getItem: function (item) {\n        return Object.assign({\n          scale: this.barScale,\n          bgColor: this.bgColor,\n          fontColor: this.fontColor,\n          hoverColor: this.hoverColor,\n          activeColor: this.activeColor,\n          path: this.$data.Path\n        }, item, {\n          path: this.$data.Path\n        })\n      }\n    }\n  }\n</script>\n\n<template>\n  <div class=\"tree_nav_bar\">\n    <ul :style=\"'background-color:'+bgColor\">\n      <item\n        v-if=\"tree.length > 1\"\n        v-bind=\"getItem({})\"\n        icon=\"bars\"\n        :label=\"showPath ? path : ''\"\n        :href=\"open\"\n        style=\"float:left\"\n      ></item>\n      <item\n        v-for=\"item in left\"\n        v-bind=\"getItem(item)\"\n        style=\"float:left\"\n        :position=\"-1\"\n      />\n      <item\n        v-for=\"item in getRight()\"\n        v-bind=\"getItem(item)\"\n        style=\"float:right\"\n        :position=\"1\"\n      />\n    </ul>\n    <vue-over-body\n      :open=\"sideBar\"\n      :dialog-style=\"{'position': 'absolute'}\"\n      before=\"tree_nav_before\"\n      after=\"tree_nav_after\"\n    >\n      <div :style=\"{\n        'min-width': '300px',\n        'height': '100%',\n        'background-color': bgColor,\n        'overflow-y': 'auto'\n      }\">\n        <ul style=\"box-shadow:none;\">\n          <item\n            v-for=\"item in tree\"\n            v-bind=\"getItem(item)\"\n          />\n        </ul>\n        <div style=\"height:20px\"></div>\n      </div>\n    </vue-over-body>\n  </div>\n</template>\n\n<style>\n  .tree_nav_bar {\n    margin-bottom:20px;\n  }\n\n  .tree_nav_bar ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n  }\n\n  .tree_nav_before {\n    height: 100%;\n    top: 0;\n    left: -300px;\n  }\n\n  .tree_nav_after {\n    left: 0;\n  }\n</style>\n"]}]}